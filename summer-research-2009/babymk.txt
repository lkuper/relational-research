lambdag@ and lambdaf@ are both just lambda.  We use them as labels to
indicate when we're creating particular structures: a lambdga@ is a
goal, and a lambdaf@ is a failure continuation (that is, the rest of
the answers in an answer stream).

reify knows that v contains no bound variables, because reify is
called after project.

exist takes a var-g, which is a function of one argument whose body is
a goal and who expects either a variable or a value as its argument.

exist creates a fresh variable v, and binds it to x: ((lambda (x) g)
v).  exist returns a goal that is waiting for a substitution.

project makes sure that x has no bound variables.
